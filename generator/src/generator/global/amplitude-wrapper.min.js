(function () {
  // Ensure the namespace exists
  window.ShopsenseEmbeds = window.ShopsenseEmbeds || {};
  window.ShopsenseEmbeds.env = "{{ENV_PLACEHOLDER}}";

  const BASE32 = "0123456789ABCDEFGHJKMNPQRSTVWXYZ";
  const BASE32_LENGTH = BASE32.length;
  const TIMESTAMP_LENGTH = 10;
  const RANDOMNESS_LENGTH = 16;

  // Function to generate a random character from the base32 set
  function randomChar() {
    return BASE32[Math.floor(Math.random() * BASE32_LENGTH)];
  }

  // Function to encode a number in base32
  function encodeBase32(number, length) {
    let encoded = "";
    while (length--) {
      encoded = BASE32[number % BASE32_LENGTH] + encoded;
      number = Math.floor(number / BASE32_LENGTH);
    }
    return encoded;
  }

  // Function to generate a ULID
  function generateULID() {
    // Generate the timestamp part (10 characters)
    const timestamp = Date.now();
    const timestampEncoded = encodeBase32(timestamp, TIMESTAMP_LENGTH);

    // Generate the randomness part (16 characters)
    let randomnessEncoded = "";
    for (let i = 0; i < RANDOMNESS_LENGTH; i++) {
      randomnessEncoded += randomChar();
    }

    // Combine the timestamp and randomness parts
    return timestampEncoded + randomnessEncoded;
  }

  const generateUUID = () => {
    const uuid = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
      const r = (Math.random() * 16) | 0;
      const v = c === "x" ? r : (r & 0x3) | 0x8;
      return v.toString(16);
    });

    return uuid;
  };

  const getTimeStampUtc = () => {
    return new Date().toISOString();
  };

  const getEventData = () => {
    return {
      ...window.ShopsenseEmbeds.trackingData,
      display_id: `${window.ShopsenseEmbeds.trackingData.session_id}-${getTimeStampUtc()}`,
      referrer_domain: window.location.hostname,
    };
  };

  window.ShopsenseEmbeds.getUtmParams = () => {
    const urlParams = new URLSearchParams(window.location.search);
    if (!urlParams || !urlParams.get("utm_source")) {
      const trackingKeys = Object.keys(window.ShopsenseEmbeds.trackingData);
      const utmInfo = {};
      trackingKeys.forEach((key) => {
        if (key.includes("utm_")) {
          utmInfo[key] = window.ShopsenseEmbeds.trackingData[key];
        }
      });
      return utmInfo;
    }
    return {
      utm_source: urlParams.get("utm_source"),
      utm_medium: urlParams.get("utm_medium"),
      utm_campaign: urlParams.get("utm_campaign"),
      utm_term: urlParams.get("utm_term"),
      utm_content: urlParams.get("utm_content"),
    };
  };

  const initUtmParams = (utmParams) => {
    window.ShopsenseEmbeds.utmParams = utmParams || {};

    if (Object.values(window.ShopsenseEmbeds.utmParams).length) {
      // Create an Identify object and set UTM parameters
      const identify = new amplitude.Identify();
      for (const [key, value] of Object.entries(window.ShopsenseEmbeds.utmParams)) {
        if (value) {
          identify.set(key, value);
        }
      }

      // Send the Identify call to set user properties
      window.ShopsenseEmbeds.amplitude.identify(identify);
    }
  };

  const initTrackingInfo = () => {
    window.ShopsenseEmbeds.trackingData = {
      session_id: generateUUID(),
      ad_id: "{{AD_ID_PLACEHOLDER}}", // Static, Unique Per Ad
      campaign_id: "{{CAMPAIGN_ID_PLACEHOLDER}}", // Static, Unique Per Campaign
      utm_source: "{{UTM_SOURCE_PLACEHOLDER}}",
      utm_medium: "{{UTM_MEDIUM_PLACEHOLDER}}",
      utm_campaign: "{{UTM_CAMPAIGN_PLACEHOLDER}}",
      utm_term: "{{UTM_TERM_PLACEHOLDER}}",
      utm_content: "{{UTM_CONTENT_PLACEHOLDER}}",
    };
  };

  const init = () => {
    window.ShopsenseEmbeds.amplitude = window.amplitude || {};

    // Initialize Amplitude with UTM parameters
    window.ShopsenseEmbeds.amplitude.init("{{AMPLITUDE_API_KEY}}", {
      // autocapture: { elementInteractions: true, attribution: true },
      // deferInitialization: true,
      autocapture: false,
      includeUtm: true,
      // includeReferrer: true,
      trackingOptions: {
        deviceModel: false,
        deviceId: false,
        osName: false,
        osVersion: false,
        os: false,
        family: false,
        platform: false,
        ipAddress: false,
      },
    });

    window.addEventListener("message", (event) => {
      if (
        event &&
        event.data &&
        typeof event.data === "object" &&
        !Array.isArray(event.data) &&
        Object.keys(event.data).length &&
        "utm_source" in event.data
      ) {
        initUtmParams(event.data);
      }
    });

    initTrackingInfo();
    initUtmParams(window.ShopsenseEmbeds.getUtmParams());
  };

  const getTrackingData = (eventType, trackingData = {}) => {
    const eventData = getEventData();
    const isClickEvent = eventType?.toLowerCase()?.includes("click");

    const product = trackingData.product;

    const productTrackingData = {};

    if (product) {
      productTrackingData.product_id = product.id;
      productTrackingData.product_name = product.display_name;
      productTrackingData.retailer_name = product.retailer?.name;
      productTrackingData.retailer_id = product.retailer?.id;
      productTrackingData.affiliate = product.retailer?.affiliate?.handle;
    }

    const clickTrackingData = {};
    if (isClickEvent) {
      const ulid = generateULID();
      clickTrackingData.tracking_id = ulid;
      clickTrackingData.ad_click_event_tracking_id = window.ShopsenseEmbeds.getTrackingUrl({
        ulid,
        product,
        isProd: window.ShopsenseEmbeds.env === "production",
      });
    }

    if ("product" in trackingData) {
      delete trackingData.product;
    }

    return {
      ...eventData,
      ...productTrackingData,
      ...clickTrackingData,
    };
  };

  var events = {};
  const logEvent = (_n, t = {}) => {
    const n = `Embed - ${_n}`;
    const key = `${n}${JSON.stringify(t)}`;
    if (!events[key]) {
      events[key] = JSON.stringify(t);
      console.log(`Event: ${n}`, t);
      if (window.ShopsenseEmbeds.env === "production") {
        window.ShopsenseEmbeds.amplitude.logEvent(n, getTrackingData(_n, t));
      }
    }
  };

  window.ShopsenseEmbeds.analytics = { logEvent: logEvent };

  document.addEventListener("DOMContentLoaded", init);
  document.addEventListener("ShopsenseEmbedInjected", init);
})();
